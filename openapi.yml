openapi: 3.0.0
info:
  title: my_frourio_todo
  description: API定義
  version: '1.0'
tags:
  - name: user
    description: ユーザー(認証済み)
  - name: users
    description: ユーザー
  - name: task
    description: タスク
  - name: auth
    description: 認証
paths:
  /api/users:
    post:
      tags:
        - users
      summary: ユーザー作成
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: リクエストの不正
        '500':
          description: 例外発生
      
  /api/user:
    get:
      tags:
        - user
      summary: ユーザーの情報取得
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: リクエストの不正
        '401':
          description: 認証エラー
        '403':
          description: アクセス禁止
        '404':
          description: ユーザーが存在しない
        '500':
          description: 例外発生

  /api/tasks:
    get:
      tags:
        - task
      summary: タスクの全件取得
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: タスクのステータス：指定した場合、そのステータスでクエリして取得 
          required: false
          schema:
            type: string
            enum: 
            - TODO
            - DOING
            - DONE
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksResponse'
        '400':
          description: リクエストの不正
        '401':
          description: 認証エラー
        '403':
          description: アクセス禁止
        '500':
          description: 例外発生
    post:
      tags:
        - task
      summary: タスク作成
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTaskResponse'
        '400':
          description: リクエストの不正
        '401':
          description: 認証エラー
        '500':
          description: 例外発生
      
  /api/tasks/{taskId}:
    patch:
      tags:
        - task
      summary: タスクのステータス変更
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          description: タスクID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '204':
          description: 成功
        '400':
          description: リクエストの不正
        '401':
          description: 認証エラー
        '403':
          description: アクセス禁止
        '404':
          description: タスクが存在しない
        '500':
          description: 例外発生
    delete:
      tags:
        - task
      summary: タスク削除
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: path
          description: タスクID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 成功
        '400':
          description: リクエストの不正
        '401':
          description: 認証エラー
        '403':
          description: アクセス禁止
        '404':
          description: タスクが存在しない
        '500':
          description: 例外発生

  /api/auth:
    post:
      tags:
        - auth
      summary: ユーザーログイン
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '201':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: リクエストの不正
        '401':
          description: 認証エラー
        '404':
          description: ユーザーが存在しない
        '500':
          description: 例外発生
      
components:
  schemas:
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password: 
          type: string
          format: password
      required:
        - name
        - email
        - password
    CreateUserResponse:
      type: object
      properties:
        userId:
          type: integer
      required:
        - userId
    UserResponse:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
      required:
        - name
        - email
    TaskResponse:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        title:
          type: string
        status:
          type: string
          enum: 
            - TODO
            - DOING
            - DONE
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time
          nullable: true
      required:
        - id
        - userId
        - title
        - status
        - createdAt
        - updatedAt
        - finishedAt
    TasksResponse:
      type: array
      items:
        $ref: '#/components/schemas/TaskResponse'
    CreateTaskRequest:
      type: object
      properties:
        title:
          type: string
        status:
          type: string
          enum: 
            - TODO
            - DOING
            - DONE
      required:
        - title
        - status
    CreateTaskResponse:
      type: object
      properties:
        taskId:
          type: integer
      required:
        - taskId
    UpdateTaskRequest:
      type: object
      properties:
        status:
          type: string
          enum: 
            - TODO
            - DOING
            - DONE
      required:
        - status
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          format: JWT
      required:
        - token
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []  